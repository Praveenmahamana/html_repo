<!DOCTYPE html>
<html lang="en" class="dark">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>KPI Dashboard</title>

<!-- TailwindCSS -->
<script src="https://cdn.tailwindcss.com"></script>
<script>
  tailwind.config = { 
    darkMode: 'class',
    theme: {
      extend: {
        colors: {
          zinc: {
            950: '#09090b'
          }
        }
      }
    }
  }
</script>

<!-- DataTables -->
<link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css">
<link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.4.2/css/buttons.dataTables.min.css">
<script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.4.2/js/dataTables.buttons.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.4.2/js/buttons.html5.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>

<!-- PapaParse -->
<script src="https://unpkg.com/papaparse@5.4.1/papaparse.min.js"></script>

<style>
  @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

  body { 
    font-family: 'Inter', sans-serif; 
    background-color: #09090b;
  }

  /* Enhanced DataTable styling */
  table.dataTable {
    border-collapse: collapse !important;
    width: 100% !important;
    background-color: rgb(24 24 27);
    color: rgb(228 228 231);
    border-radius: 0.5rem;
    overflow: hidden;
  }
  
  table.dataTable thead {
    background-color: rgb(39 39 42);
    color: rgb(161 161 170);
  }
  
  table.dataTable thead th,
  table.dataTable tbody td {
    padding: 0.5rem 0.75rem;
    white-space: nowrap;
    font-size: 0.875rem;
  }
  
  table.dataTable tbody tr {
    transition: background-color 0.2s ease;
  }
  
  table.dataTable tbody tr:hover {
    background-color: rgb(39 39 42) !important;
  }
  
  .dataTables_scrollHeadInner table { 
    margin-bottom: 0 !important; 
  }

  /* Primary table: fixed layout for perfect alignment */
  #table1.dataTable { 
    table-layout: fixed; 
  }

  /* Secondary + third tables: auto layout + ellipsis */
  #tbl-fl.dataTable, #tbl-ms.dataTable, #tbl-cn.dataTable, #tbl-third.dataTable {
    table-layout: auto;
    white-space: nowrap;
  }
  
  #tbl-fl.dataTable td, #tbl-ms.dataTable td, #tbl-cn.dataTable td, #tbl-third.dataTable td {
    max-width: 150px;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  /* DataTables UI elements in dark mode */
  .dataTables_wrapper .dataTables_filter input {
    background-color: rgb(24 24 27);
    border: 1px solid rgb(63 63 70);
    color: rgb(228 228 231);
    padding: 0.5rem;
    border-radius: 0.375rem;
    transition: all 0.2s ease;
  }
  
  .dataTables_wrapper .dataTables_filter input:focus {
    outline: none;
    border-color: rgb(99 102 241);
    box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.3);
  }
  
  .dataTables_wrapper .dataTables_length select {
    background-color: rgb(24 24 27);
    border: 1px solid rgb(63 63 70);
    color: rgb(228 228 231);
    border-radius: 0.375rem;
    padding: 0.25rem 0.5rem;
  }
  
  .dataTables_wrapper .dataTables_paginate .paginate_button {
    background-color: rgb(39 39 42) !important;
    border: 1px solid rgb(63 63 70) !important;
    color: rgb(228 228 231) !important;
    border-radius: 0.375rem;
    padding: 0.25rem 0.5rem;
    margin: 0 0.125rem;
    transition: all 0.2s ease;
  }
  
  .dataTables_wrapper .dataTables_paginate .paginate_button:hover {
    background-color: rgb(63 63 70) !important;
  }
  
  .dataTables_wrapper .dataTables_paginate .paginate_button.current {
    background-color: rgb(99 102 241) !important;
    color: white !important;
    border-color: rgb(99 102 241) !important;
  }
  
  .dt-button {
    background-color: rgb(99 102 241) !important;
    border: none !important;
    color: white !important;
    border-radius: 0.375rem !important;
    padding: 0.375rem 0.75rem !important;
    font-size: 0.875rem !important;
    transition: all 0.2s ease;
  }
  
  .dt-button:hover {
    background-color: rgb(79 70 229) !important;
    transform: translateY(-1px);
  }

  /* Tile styles - no bounding box */
  .tile-container {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.5rem;
    border-radius: 0.5rem;
    transition: all 0.2s ease;
    cursor: pointer;
    min-height: 42px;
  }
  
  .tile-container:hover {
    background-color: rgba(255, 255, 255, 0.05);
    transform: translateY(-1px);
  }
  
  .tile-section {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    min-width: 0;
  }
  
  .tile-label {
    font-size: 0.6rem;
    color: rgb(148 163 184);
    text-transform: uppercase;
    letter-spacing: 0.025em;
    margin-bottom: 0.125rem;
  }
  
  .tile-value {
    font-weight: 600;
    font-size: 0.75rem;
    color: rgb(226 232 240);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 100%;
  }
  
  .tile-diff {
    font-size: 0.7rem;
    font-weight: 500;
  }
  
  .positive {
    color: rgb(74 222 128);
  }
  
  .negative {
    color: rgb(248 113 113);
  }
  
  .neutral {
    color: rgb(254 249 195);
  }

  /* Route tile specific styles */
  .route-tile {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.5rem;
    border-radius: 0.5rem;
    transition: all 0.2s ease;
    cursor: pointer;
    min-height: 42px;
    width: 140px; /* Wider width */
  }
  
  .route-tile:hover {
    background-color: rgba(255, 255, 255, 0.05);
    transform: translateY(-1px);
  }
  
  .route-left {
    display: flex;
    flex-direction: column;
    flex: 1;
  }
  
  .route-right {
    display: flex;
    flex-direction: column;
    flex: 1;
    align-items: flex-end;
  }
  
  .bucket-indicator {
    font-size: 0.6rem;
    font-weight: 600;
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }
  
  .bucket-1 {
    background-color: rgba(74, 222, 128, 0.2);
    color: rgb(74 222 128);
  }
  
  .bucket-3 {
    background-color: rgba(248, 113, 113, 0.2);
    color: rgb(248 113 113);
  }
  
  .bucket-other {
    background-color: rgba(254, 249, 195, 0.2);
    color: rgb(254 249 195);
  }
  
  .entity-value {
    font-size: 0.65rem;
    color: rgb(212 212 216);
    margin-top: 0.125rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 100%;
  }
  
  .route-value {
    font-size: 0.9rem;
    font-weight: 700;
    color: white;
    margin-top: 0.25rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 100%;
  }

  /* Two-column tile styles */
  .two-column-tile {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 0.5rem;
    border-radius: 0.5rem;
    transition: all 0.2s ease;
    cursor: pointer;
    min-height: 42px;
    width: 140px;
  }
  
  .two-column-tile:hover {
    background-color: rgba(255, 255, 255, 0.05);
    transform: translateY(-1px);
  }
  
  .values-column {
    display: flex;
    flex-direction: column;
    flex: 1;
  }
  
  .diff-column {
    display: flex;
    flex-direction: column;
    flex: 1;
    align-items: flex-end;
  }
  
  .pdd-value {
    font-size: 0.7rem;
    color: rgb(212 212 216);
  }
  
  .apm-value {
    font-size: 0.7rem;
    color: rgb(212 212 216);
    margin-top: 0.25rem;
  }
  
  .diff-value {
    font-size: 0.85rem;
    font-weight: 700;
    margin-top: 0.125rem;
  }

  /* KPI Checks tile */
  .kpi-checks-tile {
    display: flex;
    gap: 1rem;
    padding: 0.5rem;
    border-radius: 0.5rem;
    transition: all 0.2s ease;
    cursor: pointer;
    min-height: 42px;
  }
  
  .kpi-checks-tile:hover {
    background-color: rgba(255, 255, 255, 0.05);
    transform: translateY(-1px);
  }
  
  .kpi-check {
    display: flex;
    flex-direction: column;
    align-items: center;
    flex: 1;
  }
  
  .kpi-label {
    font-size: 0.6rem;
    color: rgb(148 163 184);
    text-transform: uppercase;
    letter-spacing: 0.025em;
  }
  
  .kpi-status {
    font-size: 0.7rem;
    font-weight: 600;
    margin-top: 0.25rem;
  }

  /* File upload area */
  .file-upload-area {
    transition: all 0.3s ease;
    border: 2px dashed rgb(63 63 70);
    border-radius: 0.5rem;
    padding: 1rem;
    text-align: center;
    cursor: pointer;
  }
  
  .file-upload-area:hover {
    border-color: rgb(99 102 241);
    background-color: rgba(99, 102, 241, 0.05);
  }
  
  .file-upload-area.drag-over {
    border-color: rgb(99 102 241);
    background-color: rgba(99, 102, 241, 0.1);
  }

  /* Tab styling */
  .tab-btn {
    transition: all 0.2s ease;
    position: relative;
    overflow: hidden;
  }
  
  .tab-btn::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 50%;
    width: 0;
    height: 2px;
    background-color: rgb(99 102 241);
    transition: all 0.3s ease;
    transform: translateX(-50%);
  }
  
  .tab-btn.active::after {
    width: 100%;
  }
  
  .tab-btn:hover:not(.active)::after {
    width: 70%;
  }

  /* OD pill styling */
  .od-pill {
    transition: all 0.2s ease;
    display: inline-block;
  }
  
  .od-pill:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  }

  /* Third table breadcrumb */
  .breadcrumb {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 1rem;
    padding: 0.5rem;
    background-color: rgb(39 39 42);
    border-radius: 0.375rem;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .route-tile {
      width: 120px;
    }
    
    .two-column-tile {
      width: 120px;
    }
    
    .tile-label {
      font-size: 0.5rem;
    }
    
    .tile-value {
      font-size: 0.65rem;
    }
    
    .tile-diff {
      font-size: 0.6rem;
    }
    
    .route-value {
      font-size: 0.8rem;
    }
    
    .entity-value {
      font-size: 0.55rem;
    }
    
    .pdd-value,
    .apm-value {
      font-size: 0.6rem;
    }
    
    .diff-value {
      font-size: 0.75rem;
    }
    
    table.dataTable thead th,
    table.dataTable tbody td {
      padding: 0.375rem 0.5rem;
      font-size: 0.75rem;
    }
    
    .tab-btn {
      padding: 0.5rem;
      font-size: 0.875rem;
    }
  }
</style>
</head>

<body class="dark bg-zinc-950 text-zinc-300 min-h-screen p-4 md:p-6">

<!-- File Upload Section -->
<div class="bg-zinc-900 rounded-xl shadow-lg p-4 mb-6">
  <h2 class="text-lg font-semibold text-white mb-3">Data Sources</h2>
  <div class="grid grid-cols-2 md:grid-cols-4 gap-3">
    <div class="file-upload-area" id="upload-kpi">
      <div class="flex flex-col items-center">
        <svg class="w-6 h-6 text-blue-400 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
        </svg>
        <span class="text-xs font-medium text-white">KPI Data</span>
        <span class="text-[0.6rem] text-zinc-400 mt-1" id="file1-status">No file</span>
      </div>
      <input type="file" id="file1" accept=".csv" class="hidden">
    </div>
    
    <div class="file-upload-area" id="upload-ms">
      <div class="flex flex-col items-center">
        <svg class="w-6 h-6 text-purple-400 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
        </svg>
        <span class="text-xs font-medium text-white">MSFVA</span>
        <span class="text-[0.6rem] text-zinc-400 mt-1" id="file2-status">No file</span>
      </div>
      <input type="file" id="file2" accept=".csv" class="hidden">
    </div>
    
    <div class="file-upload-area" id="upload-fl">
      <div class="flex flex-col items-center">
        <svg class="w-6 h-6 text-green-400 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
        </svg>
        <span class="text-xs font-medium text-white">FlowFVA</span>
        <span class="text-[0.6rem] text-zinc-400 mt-1" id="file3-status">No file</span>
      </div>
      <input type="file" id="file3" accept=".csv" class="hidden">
    </div>
    
    <div class="file-upload-area" id="upload-cn">
      <div class="flex flex-col items-center">
        <svg class="w-6 h-6 text-pink-500 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
        </svg>
        <span class="text-xs font-medium text-white">CNXFVA</span>
        <span class="text-[0.6rem] text-zinc-400 mt-1" id="file4-status">No file</span>
      </div>
      <input type="file" id="file4" accept=".csv" class="hidden">
    </div>
  </div>
</div>

<!-- Primary Table -->
<div class="bg-zinc-900 rounded-xl shadow-lg p-4 mb-6">
  <h2 class="text-lg font-semibold text-white mb-3">KPI Overview</h2>
  <div class="overflow-x-auto">
    <table id="table1" class="display w-full"></table>
  </div>
</div>

<!-- Secondary Tables Section -->
<div class="bg-zinc-900 rounded-xl shadow-lg p-4">
  <h2 class="text-lg font-semibold text-white mb-3">Detailed Analysis</h2>
  
  <!-- Tab Navigation -->
  <div class="border-b border-zinc-700 mb-4">
    <nav class="flex flex-wrap gap-1" id="secondary-tabs">
      <button data-tab="fl" class="tab-btn px-4 py-2 rounded-t-lg text-sm font-medium">FlowFVA</button>
      <button data-tab="ms" class="tab-btn px-4 py-2 rounded-t-lg text-sm font-medium">MSFVA</button>
      <button data-tab="cn" class="tab-btn px-4 py-2 rounded-t-lg text-sm font-medium">ConnectionsFVA</button>
    </nav>
  </div>
  
  <!-- Tab Content -->
  <div id="tab-content">
    <div id="tab-fl" class="tab-panel">
      <div class="overflow-x-auto">
        <table id="tbl-fl" class="display w-full"></table>
      </div>

      <!-- Third table (appears after clicking an OD pill) -->
      <div id="third-table-container" class="mt-6 hidden">
        <div class="breadcrumb">
          <button id="back-to-secondary" class="flex items-center text-sm text-blue-400 hover:text-blue-300">
            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
            </svg>
            Back to FlowFVA
          </button>
          <span class="text-sm text-zinc-400">/</span>
          <span class="text-sm text-white">OD Details: <span id="od-value" class="font-mono"></span></span>
        </div>
        <div class="overflow-x-auto">
          <table id="tbl-third" class="display w-full"></table>
        </div>
      </div>
    </div>

    <div id="tab-ms" class="tab-panel hidden">
      <div class="overflow-x-auto">
        <table id="tbl-ms" class="display w-full"></table>
      </div>
    </div>
    
    <div id="tab-cn" class="tab-panel hidden">
      <div class="overflow-x-auto">
        <table id="tbl-cn" class="display w-full"></table>
      </div>
    </div>
  </div>
</div>

<script>
/* ---------- globals ---------- */
let table1, msfvaData = [], flowfvaData = [], connfvaData = [];
let lastClickedOD = '';

/* ---------- helpers ---------- */
const pillColorMap = new Map();
function pillColor(v){
  if(!pillColorMap.has(v)){
    const h=[...String(v)].reduce((a,b)=>((a<<5)-a+b.charCodeAt(0))&0x7fffffff,0);
    const colors=['#3b82f6','#a855f7','#22c55e','#f97316','#eab308','#06b6d4','#ef4444'];
    pillColorMap.set(v,colors[h%colors.length]);
  }
  return pillColorMap.get(v);
}

function htmlEsc(s){
  return String(s ?? '')
    .replace(/&/g,'&amp;')
    .replace(/</g,'&lt;')
    .replace(/>/g,'&gt;')
    .replace(/"/g,'&quot;')
    .replace(/'/g,'&#39;');
}

/* DataTables init wrapper */
function initTable(id, data, cols, hidden = [], page = 10) {
  const $tbl = $(`#${id}`);
  if ($.fn.dataTable.isDataTable($tbl)) $tbl.DataTable().destroy();
  $tbl.empty();

  const isPrimary = (id === 'table1');

  return $tbl.DataTable({
    data,
    columns: cols.map(c => ({ ...c, visible: !hidden.includes(c.data) })),
    pageLength: page,
    dom: 'Bfrtip',
    buttons: ['copyHtml5', 'excelHtml5', 'csvHtml5'],
    scrollX: true,
    autoWidth: !isPrimary,
    fixedHeader: isPrimary,
    drawCallback: function () { this.api().columns.adjust(); }
  });
}

/* safe number helpers */
const num = v => {
  const x = parseFloat(String(v).replace(/,/g,''));
  return isNaN(x) ? 0 : x;
};
const pct = v => {
  const x = parseFloat(String(v).toString().replace('%',''));
  return isNaN(x) ? 0 : x;
};

/* ---------- load primary CSV ---------- */
function loadFirstTable(file){
  Papa.parse(file,{header:true,skipEmptyLines:true,complete(r){
    const rows=r.data.filter(x=>Object.values(x).some(v=>v!=='' && v!=null));
    if(!rows.length){alert('Empty CSV');return;}

    const whitelist=[]; // (keep all real cols hidden by default)
    const hiddenCols=Object.keys(rows[0]).filter(k=>!whitelist.includes(k));
    const cols=[];

    /* Tile 1: Route Info (wider, 2-column layout, no border) */
    cols.push({
      title:'Route',data:null,orderable:false,
      render:(d,t,row)=>{
        const entity=row['Route/Leg Entity']||'';
        const route=row['Route/Leg']||'';
        const bucket=String(row['Bucket_percentile']||'').trim();
        const [left,...rest]=String(entity).split('_');
        const right=rest.join('_');
        const esc=s=>String(s||'').replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
        const bg=pillColor(route);
        
        // Determine bucket class
        let bucketClass = 'bucket-other';
        if(bucket.startsWith('1.')) bucketClass = 'bucket-1';
        else if(bucket.startsWith('3.')) bucketClass = 'bucket-3';
        
        return `<div class="route-tile" style="background-color: ${bg}20;" onclick="filterSecondary('Route/Leg','${esc(route).replace(/'/g,'\\&#39;}')}')">
                  <div class="route-left">
                    <div class="bucket-indicator ${bucketClass}">${esc(bucket)}</div>
                    <div class="entity-value">${esc(left)}_${esc(right)}</div>
                  </div>
                  <div class="route-right">
                    <div class="route-value">${esc(route)}</div>
                  </div>
                </div>`;
      }
    });

    /* Tile 2: KPI Checks (no border) */
    cols.push({
      title:'KPI Checks',data:null,orderable:false,
      render:(d,t,row)=>{
        const checkStatus=v=>String(v).toUpperCase()==='KPI-MET'?'Pass':'Fail';
        const paxStatus=checkStatus(row['Abs_Pax_Diff_check']);
        const lfStatus=checkStatus(row['Abs_LF_Diff_check']);
        const flStatus=checkStatus(row['Abs_Flow_Diff_check']);
        
        const paxClass = paxStatus === 'Pass' ? 'positive' : 'negative';
        const lfClass = lfStatus === 'Pass' ? 'positive' : 'negative';
        const flClass = flStatus === 'Pass' ? 'positive' : 'negative';
        
        return `<div class="kpi-checks-tile">
                  <div class="kpi-check">
                    <div class="kpi-label">Pax</div>
                    <div class="kpi-status ${paxClass}">${paxStatus}</div>
                  </div>
                  <div class="kpi-check">
                    <div class="kpi-label">LF</div>
                    <div class="kpi-status ${lfClass}">${lfStatus}</div>
                  </div>
                  <div class="kpi-check">
                    <div class="kpi-label">FL</div>
                    <div class="kpi-status ${flClass}">${flStatus}</div>
                  </div>
                </div>`;
      }
    });

    /* Tile 3: Pax/week (2-column layout, no border) */
    cols.push({
      title: 'Pax/week', data: null, orderable: false,
      render: (data, type, row) => {
        const pdd = parseFloat(row['PDD_Total_pax/week']) || 0;
        const apm = parseFloat(row['APM_Total_pax/week']) || 0;
        const diffPct = pdd ? ((apm - pdd) / pdd) * 100 : 0;
        const pddDisp = (pdd).toFixed(0);
        const apmDisp = (apm).toFixed(0);
        const diffDisp = diffPct.toFixed(2);
        
        const diffClass = diffPct >= 0 ? 'positive' : 'negative';
        
        return `<div class="two-column-tile">
                  <div class="values-column">
                    <div class="pdd-value">PDD: ${pddDisp}</div>
                    <div class="apm-value">APM: ${apmDisp}</div>
                  </div>
                  <div class="diff-column">
                    <div class="diff-value ${diffClass}">${diffDisp}%</div>
                  </div>
                </div>`;
      }
    });

    /* Tile 4: Flow/week (2-column layout, no border) */
    cols.push({
      title:'Flow/week',data:null,orderable:false,
      render:(d,t,row)=>{
        const pdd=num(row['Flow_PDD_Pax/week']);
        const apm=num(row['Flow_APM_Pax/week']);
        const diff=pdd?((apm-pdd)/pdd)*100:0;
        const diffClass = diff >= 0 ? 'positive' : 'negative';
        
        return `<div class="two-column-tile">
                  <div class="values-column">
                    <div class="pdd-value">PDD: ${pdd.toLocaleString()}</div>
                    <div class="apm-value">APM: ${apm.toLocaleString()}</div>
                  </div>
                  <div class="diff-column">
                    <div class="diff-value ${diffClass}">${diff.toFixed(1)}%</div>
                  </div>
                </div>`;
      }
    });

    /* Tile 5: Local/week (2-column layout, no border) */
    cols.push({
      title:'Local/week',data:null,orderable:false,
      render:(d,t,row)=>{
        const pdd=num(row['Local_PDD_Pax/week']);
        const apm=num(row['Local_APM_Pax/week']);
        const diff=pdd?((apm-pdd)/pdd)*100:0;
        const diffClass = diff >= 0 ? 'positive' : 'negative';
        
        return `<div class="two-column-tile">
                  <div class="values-column">
                    <div class="pdd-value">PDD: ${pdd.toLocaleString()}</div>
                    <div class="apm-value">APM: ${apm.toLocaleString()}</div>
                  </div>
                  <div class="diff-column">
                    <div class="diff-value ${diffClass}">${diff.toFixed(1)}%</div>
                  </div>
                </div>`;
      }
    });

    /* Tile 6: Flow% (2-column layout, no border) */
    cols.push({
      title:'Flow%',data:null,orderable:false,
      render:(d,t,row)=>{
        const pdd = pct(row['Flow_PDD%']);
        const apm = pct(row['Flow_APM%']);
        const signed = apm - pdd;
        const diff = Math.abs(signed);
        const diffClass = signed >= 0 ? 'positive' : 'negative';
        
        return `<div class="two-column-tile">
                  <div class="values-column">
                    <div class="pdd-value">PDD: ${pdd.toFixed(2)}%</div>
                    <div class="apm-value">APM: ${apm.toFixed(2)}%</div>
                  </div>
                  <div class="diff-column">
                    <div class="diff-value ${diffClass}">${diff.toFixed(2)}%</div>
                  </div>
                </div>`;
      }
    });

    /* Tile 7: Load Factor (2-column layout, no border) */
    cols.push({
      title:'Load Factor',data:null,orderable:false,
      render:(d,t,row)=>{
        const pdd = pct(row['PLF_PDD%']);  // treat as %
        const apm = pct(row['PLF_APM%']);
        const diff = apm - pdd;
        const diffClass = diff >= 0 ? 'positive' : 'negative';
        
        return `<div class="two-column-tile">
                  <div class="values-column">
                    <div class="pdd-value">PDD: ${pdd.toFixed(2)}%</div>
                    <div class="apm-value">APM: ${apm.toFixed(2)}%</div>
                  </div>
                  <div class="diff-column">
                    <div class="diff-value ${diffClass}">${(Math.abs(diff)).toFixed(2)}%</div>
                  </div>
                </div>`;
      }
    });

    /* Add real columns (hidden) so DataTables has them */
    Object.keys(rows[0]).forEach(k=>{
      cols.push({title:k,data:k});
    });

    table1 = initTable('table1', rows, cols, hiddenCols, 10);
    
    // Update file status
    document.getElementById('file1-status').textContent = file.name;
  }});
}

/* ---------- load secondary CSVs ---------- */
function loadSecondTable(file,type){
  Papa.parse(file,{header:true,skipEmptyLines:true,complete(r){
    const rows=r.data.filter(x=>Object.values(x).some(v=>v!=='' && v!=null));
    if(type==='MSFVA') msfvaData=rows;
    if(type==='FlowFVA') flowfvaData=rows;
    if(type==='ConnectionsFVA') connfvaData=rows;
    
    // Update file status
    const statusId = type === 'MSFVA' ? 'file2-status' : 
                    type === 'FlowFVA' ? 'file3-status' : 'file4-status';
    document.getElementById(statusId).textContent = file.name;
  }});
}

/* ---------- secondary filtering ---------- */
function filterSecondary(col,val){
  updateSecondary(msfvaData,'tbl-ms',col,val,'ms');
  updateSecondary(flowfvaData,'tbl-fl',col,val,'fl');
  updateSecondary(connfvaData,'tbl-cn',col,val,'cn');

  // Switch to first non-empty tab after filtering
  setTimeout(()=>{
    const hasMs=$.fn.dataTable.isDataTable('#tbl-ms') ? $('#tbl-ms').DataTable().data().count()>0 : false;
    const hasFl=$.fn.dataTable.isDataTable('#tbl-fl') ? $('#tbl-fl').DataTable().data().count()>0 : false;
    const hasCn=$.fn.dataTable.isDataTable('#tbl-cn') ? $('#tbl-cn').DataTable().data().count()>0 : false;
    if(hasMs) document.querySelector('button[data-tab="ms"]').click();
    else if(hasFl) document.querySelector('button[data-tab="fl"]').click();
    else if(hasCn) document.querySelector('button[data-tab="cn"]').click();
  },50);
}

function updateSecondary(src,tblId,col,val,type){
  if(!src.length){
    if(!$.fn.dataTable.isDataTable('#'+tblId)) initTable(tblId,[],[{title:'No data',data:null}],[],10);
    else { const dt=$('#'+tblId).DataTable(); dt.clear().draw(); }
    return;
  }

  const targetVal=String(val||'').trim().toUpperCase();
  let rows=[];

  if(type==='ms' || type==='cn'){
    rows = src.filter(r=>{
      const o = String(r['origin'] || r['ORG'] || r['Origin'] || '').trim().toUpperCase();
      const d = String(r['destin'] || r['DST'] || r['Destination'] || '').trim().toUpperCase();
      return (o + d) === targetVal || (o + '-' + d) === targetVal;
    });
    if(type==='ms'){
      rows = rows.filter(r=>{
        const od = String(r['origin']||'') + String(r['destin']||'');
        return !od.startsWith('**') && !od.startsWith('*Host') && !od.startsWith('*Others');
      });
    }
  } else if(type==='fl'){
    rows = src.filter(r=>{
      const od = String(r['leg_OD'] || r['OD'] || '').trim().toUpperCase();
      return od === targetVal;
    });
  }

  let cols;
  if(type==='fl'){
    // hide these columns in FlowFVA
    const hiddenSet = new Set(['leg_op_aln','leg_OD','leg_entity','leg_mkt_aln','od_entity'].map(s=>s.toLowerCase()));
    cols = Object.keys(src[0] || {}).map(k=>{
      const lower = k.toLowerCase();
      if(lower === 'od'){
        return {
          title: 'OD',
          data: k,
          render: (data) => {
            const val = String(data || '').trim();
            const safe = htmlEsc(val);
            const bg = pillColor(val);
            // Use data attribute to avoid quote issues
            return `<span class="od-pill px-2 py-1 rounded-full text-white text-xs font-medium"
                       style="background-color:${bg};cursor:pointer"
                       data-od="${safe}"
                       onclick="filterThirdTable(this.dataset.od)">${safe}</span>`;
          }
        };
      }
      return { title: k, data: k, visible: !hiddenSet.has(lower) };
    });
  } else {
    cols = Object.keys(src[0] || {}).map(k=>({title:k,data:k}));
  }

  initTable(tblId, rows, cols, [], 10);
}

/* ---------- third table (filtered by OD) ---------- */
function filterThirdTable(odValue){
  lastClickedOD = String(odValue || '').trim();
  const cont = document.getElementById('third-table-container');
  cont.classList.remove('hidden');
  document.getElementById('od-value').textContent = lastClickedOD;

  // Filter FlowFVA rows matching clicked OD (fallback to leg_OD if that's what's present)
  const filtered = flowfvaData.filter(r => {
    const od = String(r['OD'] || r['leg_OD'] || '').trim().toUpperCase();
    return od === lastClickedOD.toUpperCase();
  });

  // Reuse same hidden set so third table also hides those fields
  const hiddenSet = new Set(['leg_op_aln','leg_OD','leg_entity','leg_mkt_aln','od_entity'].map(s=>s.toLowerCase()));
  const cols = Object.keys(flowfvaData[0] || {}).map(k => ({ title: k, data: k, visible: !hiddenSet.has(k.toLowerCase()) }));

  initTable('tbl-third', filtered, cols, [], 10);

  // Ensure we’re on the FlowFVA tab to see the third table
  document.querySelector('button[data-tab="fl"]').click();
}

/* ---------- tab switching ---------- */
document.querySelectorAll('.tab-btn').forEach(btn=>{
  btn.addEventListener('click',()=>{
    document.querySelectorAll('.tab-panel').forEach(p=>p.classList.add('hidden'));
    document.querySelectorAll('.tab-btn').forEach(b=>{
      b.classList.remove('bg-blue-600','text-white','active');
      b.classList.add('text-zinc-300');
    });
    btn.classList.add('bg-blue-600','text-white','active');
    document.getElementById('tab-'+btn.dataset.tab).classList.remove('hidden');
  });
});

// Set first tab as active by default
document.querySelector('button[data-tab="fl"]').classList.add('bg-blue-600','text-white','active');

/* ---------- file listeners ---------- */
document.getElementById('file1').addEventListener('change',e=>loadFirstTable(e.target.files[0]));
document.getElementById('file2').addEventListener('change',e=>loadSecondTable(e.target.files[0],'MSFVA'));
document.getElementById('file3').addEventListener('change',e=>loadSecondTable(e.target.files[0],'FlowFVA'));
document.getElementById('file4').addEventListener('change',e=>loadSecondTable(e.target.files[0],'ConnectionsFVA'));

// File upload area click handlers
document.getElementById('upload-kpi').addEventListener('click', () => document.getElementById('file1').click());
document.getElementById('upload-ms').addEventListener('click', () => document.getElementById('file2').click());
document.getElementById('upload-fl').addEventListener('click', () => document.getElementById('file3').click());
document.getElementById('upload-cn').addEventListener('click', () => document.getElementById('file4').click());

// Drag and drop functionality
['upload-kpi', 'upload-ms', 'upload-fl', 'upload-cn'].forEach(id => {
  const uploadArea = document.getElementById(id);
  const fileInput = document.getElementById(id.replace('upload-', 'file'));
  
  ['dragenter', 'dragover'].forEach(eventName => {
    uploadArea.addEventListener(eventName, (e) => {
      e.preventDefault();
      e.stopPropagation();
      uploadArea.classList.add('drag-over');
    });
  });
  
  ['dragleave', 'drop'].forEach(eventName => {
    uploadArea.addEventListener(eventName, (e) => {
      e.preventDefault();
      e.stopPropagation();
      uploadArea.classList.remove('drag-over');
    });
  });
  
  uploadArea.addEventListener('drop', (e) => {
    const dt = e.dataTransfer;
    const files = dt.files;
    if (files.length) {
      fileInput.files = files;
      const event = new Event('change', { bubbles: true });
      fileInput.dispatchEvent(event);
    }
  });
});

// Back button for third table
document.getElementById('back-to-secondary').addEventListener('click', () => {
  document.getElementById('third-table-container').classList.add('hidden');
});

// Initialize with first tab active
document.getElementById('tab-fl').classList.remove('hidden');
</script>
</body>
</html>